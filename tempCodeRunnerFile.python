import os
import math


def converting_to_hexa(decNum):
    try:
        return hex(decNum).upper()[2:]
    except ValueError:
        print('Invalid input.')


def baseFrom_to_decimal(number, base):
    try:
        return int(number, base)
    except ValueError:
        print('Invalid number.')


def decimal_conversion(convertFrom, numberSystem):
    try:
        convertedNumber = ""
        floatNumber = "." in convertFrom
        convertFrom = float(convertFrom)

        currentNumber = math.floor(convertFrom)
        print("\nWhole Digits: ")
        while currentNumber != 0:
            remainder = currentNumber % numberSystem
            answer = math.floor(currentNumber / numberSystem)
            print(f"{currentNumber} / {numberSystem} = {answer} with r = {remainder}")
            if numberSystem == 16:
                remainder = converting_to_hexa(remainder)
            convertedNumber += str(remainder)
            currentNumber = answer
        convertedNumber = convertedNumber[::-1]

        if floatNumber:
            print("\nDecimal Digits")
            convertedNumber = convertedNumber + "."
            decimalDigits = float(convertFrom) - math.floor(convertFrom)
            while decimalDigits != 0:
                answer = decimalDigits * numberSystem
                print(f"{decimalDigits:.2f} * {numberSystem} = {round(answer, 2)}")
                singleDig = math.floor(answer)
                if numberSystem == 16:
                    singleDig = converting_to_hexa(math.floor(answer))
                convertedNumber += str(singleDig)
                decimalDigits = float(answer) - math.floor(answer)
                if int(decimalDigits * 10) == 0 and numberSystem == 2:
                    break

        return convertedNumber

    except ValueError:
        print("Invalid. Must be a decimal number.")


def toDecimal_conversion(convertFrom, numberSystem):
    floatNumber = '.' in convertFrom
    decNumbers = 0
    if floatNumber:
        wholeNumbers = convertFrom.find('.')
        decNumbers = convertFrom[wholeNumbers + 1:]
    else:
        wholeNumbers = len(convertFrom)

    print("\nWhole Digits: ")
    convertedNumber = 0.0
    for places in range(0, wholeNumbers):
        if numberSystem == 16:
            digit = baseFrom_to_decimal(convertFrom[places], 16)
        else:
            digit = int(convertFrom[places])
        result = digit * (numberSystem ** ((wholeNumbers - 1) - places))
        print(f'({digit} * {numberSystem} ^ {((wholeNumbers - 1) - places)}) = {result} + {convertedNumber}')
        convertedNumber += result
    print(convertedNumber)

    if floatNumber:
        print("\nDecimal Digits: ")
        convertedNumber2 = 0.0
        power = -1
        for places in decNumbers:
            if numberSystem == 16:
                digit = baseFrom_to_decimal(places, 16)
            else:
                digit = int(places)
            result = digit * (numberSystem ** power)
            print(f'({places} * {numberSystem} ^ {power}) = {result} + {convertedNumber2}')
            convertedNumber2 += result
            power -= 1
        print(convertedNumber2)
        convertedNumber = convertedNumber + convertedNumber2

    return convertedNumber


def number_system_operations(base, operator, givenInput):
        base_prefixes = {
            '0b': 2,
            '0o': 8,
            '0x': 16
        }

        base = base_prefixes.get(base, 10)

        AStotalAnswer = 0
        MDtotalAnswer = 1
        for givenNumber in givenInput:
            number = toDecimal_conversion(givenNumber, base)
            if operator == "+":
                AStotalAnswer += number
            elif operator == "-":
                if AStotalAnswer < number:
                    AStotalAnswer = number - AStotalAnswer
                else:
                    AStotalAnswer -= number
            elif operator == "*":
                MDtotalAnswer *= number
            elif operator == "/":
                if MDtotalAnswer < number:
                    MDtotalAnswer = number / MDtotalAnswer
                else:
                    MDtotalAnswer /= number

        if operator == '+' or operator == '-':
            convertedAnswer = decimal_conversion(str(AStotalAnswer), base)
        elif operator == '*' or operator == '/':
            convertedAnswer = decimal_conversion(str(MDtotalAnswer), base)
        else:
            print('Invalid Operator.')
            return

        # os.system('cls')

        if base == 2:
            print('BINARY OPERATION \n')
        elif base == 8:
            print('OCTAL OPERATION \n')
        elif base == 16:
            print('HEXADECIMAL OPERATION \n')
        else:
            print('DECIMAL OPERATION \n')

        print(f"{givenInput[0]} ", end="")
        for i in range(1, len(givenInput)):
            print(f"{operator} {givenInput[i]} ", end="")

        return convertedAnswer


def number_system_calculator():
    print("\nBase: 0b (binary), 0o (octal), 0x (hexadecimal), 10 (decimal)\n")
    print("[+] Addition")
    print("[-] Subtraction")
    print("[*] Multiplication")
    print("[/] Division")
    print("[=] Enter = to Execute")
    print("[^] Go Back --> \n")

    choice = []
    base = input("Enter Base: ")
    operator = input('Enter Operator: ')

    if "^" in base or "^" in operator:
        return number_system_operations

    while True:
        userInput = input("Enter Numbers: ")
        if userInput == '=':
            break
        choice.append(userInput)

    print(f" \n= {number_system_operations(base, operator, choice)} ")
    return number_system_calculator()